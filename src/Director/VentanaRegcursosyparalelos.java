/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Director;
// Importación de clases necesarias
import java.awt.Color; // Para trabajar con colores en la interfaz gráfica
import queries.Consultas; // Para acceder a las consultas de la base de datos

import javax.swing.JOptionPane;//para mostrar cuadros 
import javax.swing.table.DefaultTableModel; // Para manipular la tabla en la interfaz gráfica

// Este fragmento importa las clases necesarias para gestionar la interfaz gráfica
// y las operaciones de base de datos y validación, asegurando que el programa tenga acceso
// a todas las funcionalidades necesarias para la interacción con el usuario y la manipulación de datos.

/**
 *
 * @author 62646
 */
public class VentanaRegcursosyparalelos extends javax.swing.JFrame {

    /**
     * Creates new form VentanaRegcursosyparalelos
     */
    public VentanaRegcursosyparalelos() {
        initComponents();
        HabilitarCampos();
        LlenarTabla();
    }
    // Método para deshabilitar la edición de los campos de texto
void DeshabilitarCampos() {
    // Deshabilitar la edición en los campos de texto para evitar cambios por parte del usuario
    jTextField1.setEditable(false);
    jTextField2.setEditable(false);
}

// Método para limpiar los campos de texto
void LimpiarCampos() {
    // Limpia los contenidos de los campos de texto para permitir una nueva entrada
    jTextField1.setText("");
    jTextField2.setText("");
}

// Método para habilitar la edición de los campos de texto
void HabilitarCampos() {
    // Habilitar los campos de texto para permitir la edición por parte del usuario
    jTextField1.setEditable(true);
    jTextField2.setEditable(true);

    // Poner el foco en el primer campo para que el usuario empiece a escribir
    jTextField1.requestFocus();
}

// Método para llenar la tabla con los datos obtenidos de la base de datos
void LlenarTabla() {
    // Crear una instancia de DataBaseQueries para ejecutar las consultas
    Consultas dbQueries = new Consultas();

    // Obtener el modelo de la tabla con los datos de los cursos y paralelos
    // Asegúrate de que la función LlenarTablaRegistroCursosyParalelos() devuelva un modelo válido
    DefaultTableModel model = dbQueries.LlenarTablaRegistroCursosyParalelos();

    // Asignar el modelo obtenido a la tabla para que se muestren los datos
    jTable1.setModel(model);
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        exitTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 415, -1));
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 415, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI Variable", 1, 24)); // NOI18N
        jLabel1.setText("REGISTRO DE CURSOS Y PARALELOS");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Curso");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 150, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Paralelo");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 178, 48, -1));

        jPanel2.setBackground(new java.awt.Color(214, 227, 235));

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Registrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Modificar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton1)
                .addGap(100, 100, 100)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(84, 84, 84)
                .addComponent(jButton2)
                .addGap(62, 62, 62))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 680, 50));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 640, 130));

        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("*Ingrese los datos necesarios para continuar con el registro  ");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        exitTxt.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        exitTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitTxt.setText("< Atras");
        exitTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        exitTxt.setPreferredSize(new java.awt.Dimension(40, 40));
        exitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitTxtMouseExited(evt);
            }
        });
        jPanel1.add(exitTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int r = JOptionPane.showOptionDialog(this, 
        "¿Estás seguro de salir?", // El mensaje que se muestra en el cuadro de diálogo
        "De registro de cursos",  // El título de la ventana del diálogo
        JOptionPane.YES_NO_OPTION, // Definir las opciones: "Sí" y "No"
        JOptionPane.QUESTION_MESSAGE, // Definir el tipo de mensaje (en este caso, una pregunta)
        null, // Icono personalizado (en este caso, se deja null para usar el icono predeterminado)
        null, // Opciones personalizadas para el diálogo (en este caso se deja null, usando las predeterminadas)
        null); // Este parámetro es el valor predeterminado de la opción seleccionada (también se deja null aquí)

        // Si el usuario elige "Sí" (opción 0), la aplicación se cierra
        if (r == 0) {
            System.exit(0);  // Cierra la aplicación
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String GRADO = jTextField1.getText();
        String PARALELO = jTextField2.getText();

        if (GRADO.isEmpty() || PARALELO.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Validación del grado que solo permita que se registre 1 solo número del 1 al 6  
        if (!GRADO.matches("[1-6]")) { 
            JOptionPane.showMessageDialog(this, "Ingrese un número válido del 1 al 6 en el campo Grado", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validación del paralelo que solo permita que se registre una sola letra mayúscula entre A, B y C
        if (!PARALELO.matches("[ABC]")) {  
            JOptionPane.showMessageDialog(this, "Ingrese solo una letra mayúscula (A, B o C) en el campo Paralelo", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return; // Detener la ejecución si la validación falla
        }
        // Creación de un objeto de la clase DataBaseQueries
        Consultas dbQueries = new Consultas();

        // Llamada al método registrarCurso pasando como parámetros el GRADO y el PARALELO
        boolean resultado = dbQueries.registrarCurso(GRADO, PARALELO);

        // Verificación del resultado de la operación
        if (resultado) {
            // Si el registro es exitoso, muestra un mensaje de éxito
            JOptionPane.showMessageDialog(this, "Registro exitoso", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Limpia los campos de entrada
            LimpiarCampos();

            // Actualiza la tabla con los nuevos registros
            LlenarTabla(); 
        } else {
            // Si el registro falla, muestra un mensaje de error
            JOptionPane.showMessageDialog(this, "Error al registrar", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
       
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Obtener la fila seleccionada en la tabla
        int fila = jTable1.getSelectedRow();

        // Verificar si no se ha seleccionado ninguna fila
        if (fila == -1) {
            // Mostrar un mensaje de error si no hay fila seleccionada
            JOptionPane.showMessageDialog(this, "Seleccione un registro para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Detener la ejecución si no hay fila seleccionada
        }

        // Obtener el ID del registro seleccionado (asumiendo que la primera columna contiene el ID)
        int id = Integer.parseInt(jTable1.getValueAt(fila, 0).toString());

        // Crear un objeto de la clase DataBaseQueries para interactuar con la base de datos
        Consultas dbQueries = new Consultas();

        // Llamar al método eliminarCurso para eliminar el curso con el ID proporcionado
        boolean exito = dbQueries.eliminarCurso(id);

        // Verificar si la eliminación fue exitosa
        if (exito) {
            // Mostrar un mensaje de éxito si la eliminación fue exitosa
            JOptionPane.showMessageDialog(this, "Registro eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Actualizar la tabla con los datos más recientes
            LlenarTabla();

            // Limpiar los campos del formulario
            LimpiarCampos();
        } else {
            // Mostrar un mensaje de error si no se pudo eliminar el registro
            JOptionPane.showMessageDialog(this, "No se pudo eliminar el registro", "Error", JOptionPane.ERROR_MESSAGE);
        }  
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // Obtener la fila seleccionada en la tabla
        int fila = jTable1.getSelectedRow();

        // Verificar si la fila seleccionada es válida (mayor o igual a 0)
        if (fila >= 0) {
            // Cargar los valores de las columnas de la fila seleccionada en los campos de texto
            jTextField1.setText(jTable1.getValueAt(fila, 1).toString()); // Carga el valor de la columna 1 en jTextField1
            jTextField2.setText(jTable1.getValueAt(fila, 2).toString()); // Carga el valor de la columna 2 en jTextField2

            // Deshabilitar los campos de texto después de cargar los valores
            HabilitarCampos();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        HabilitarCampos();
        // Obtener la fila seleccionada
        int fila = jTable1.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un registro para modificar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener el ID de la fila seleccionada (suponiendo que la primera columna es el ID)
        int ID_CURSOS;
        try {
            ID_CURSOS= Integer.parseInt(jTable1.getValueAt(fila, 0).toString());
        //Mensaje de error
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener el ID del Curso.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String GRADO = jTextField1.getText();
        String PARALELO = jTextField2.getText();
        //validacion de datos todo debe estar lleno 
        if (GRADO.isEmpty() || PARALELO.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Validación del grado que solo permita que se registre 1 solo número del 1 al 6  
        if (!GRADO.matches("[1-6]")) { 
            JOptionPane.showMessageDialog(this, "Ingrese un número válido del 1 al 6 en el campo Grado", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validación del paralelo que solo permita que se registre una sola letra mayúscula entre A, B y C
        if (!PARALELO.matches("[ABC]")) {  
            JOptionPane.showMessageDialog(this, "Ingrese solo una letra mayúscula (A, B o C) en el campo Paralelo", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return; // Detener la ejecución si la validación falla
        }
        // Crear un objeto de la clase DataBaseQueries para interactuar con la base de datos
        Consultas dbQueries = new Consultas();
        //llamada al metodo
        boolean resultado = dbQueries.modificarCurso( ID_CURSOS, GRADO,PARALELO);
        //verificacion de eliminacion  
        if (resultado) {
            JOptionPane.showMessageDialog(this, "Registro exitoso", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            //limpieza de campos
            LimpiarCampos();
            //actualiacion de tabla
            LlenarTabla(); 
        } else {
            //mensaje de error
            JOptionPane.showMessageDialog(this, "Error al registrar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void exitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseClicked
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Estás seguro de salir del sistema?", "Colegio X", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            VentanaPrincipalDir newframe = new VentanaPrincipalDir();
            newframe.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_exitTxtMouseClicked

    private void exitTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseEntered
        exitTxt.setBackground(Color.red);
        exitTxt.setForeground(Color.white);
    }//GEN-LAST:event_exitTxtMouseEntered

    private void exitTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseExited
        exitTxt.setBackground(Color.white);
        exitTxt.setForeground(Color.black);
    }//GEN-LAST:event_exitTxtMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaRegcursosyparalelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaRegcursosyparalelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaRegcursosyparalelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaRegcursosyparalelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaRegcursosyparalelos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel exitTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
